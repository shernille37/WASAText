openapi: 3.0.3
info:
  title: WASAText
  description: |
    This API for the WASAText Project
  version: 0.0.1

paths:
  /login:
    post:
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned

      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "^.*?$"
                  minLength: 3
                  maxLength: 16
        required: true

      responses:
        "201":
          description: User logged-in successfuly
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    format: uuid

  /conversations:
    get:
      summary: Get the list of all conversations
      description: |
        Fetch the list of all conversations based 
        on the Logged-In User
      operationId: getMyConversations
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Successful fetch
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Conversation"
                  - type: object
                    properties:
                      latestMessage:
                        type: object
                        properties:
                          timestamp:
                            type: string
                            example: 06/06/2024 13:00

                          isImage:
                            type: boolean
                            example: false

                          message:
                            type: string
                            example: Hello this is John Doe

        "404":
          description: Unauthorized

    post:
      summary: Add a conversation
      description: |
        Create a new conversation with another user or group of users

      operationId: addConversation

      security:
        - bearerAuth: []

      requestBody:
        description: Members of the conversation and the first message
        content:
          application/json:
            schema:
              type: object
              properties:
                isGroup:
                  type: boolean

                members:
                  type: array
                  items:
                    type: string
                    format: uuid

                message:
                  type: string
                  example: Hello this is Johnny Doe

      responses:
        "200":
          description: Conversation added successfuly
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationID:
                    type: string
                    format: uuid

        "400":
          description: Conversation already exists

        "404":
          description: Unauthorized

  /conversations/{id}:
    get:
      summary: Get a conversation based on id
      description: |
        Get a conversation based on ID

      operationId: getConversation

      security:
        - bearerAuth: []

      parameters:
        - name: id
          in: path
          description: The id of the conversation
          schema:
            type: string
            format: uuid
          required: true

      responses:
        "200":
          description: Fetch successfuly
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Conversation"
                  - type: object
                    properties:
                      members:
                        type: array
                        items:
                          type: string
                          format: uuid

        "404":
          description: Conversation not found

  /conversations/{id}/messages:
    get:
      summary: Get all the messages of a conversation
      description: |
        Get all of the messages of a conversation based on ID

      operationId: getMessages

      security:
        - bearerAuth: []

      parameters:
        - name: id
          in: path
          description: The id of the conversation
          schema:
            type: string
            format: uuid
          required: true

      responses:
        "200":
          description: Fetch Successfuly
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"

    post:
      summary: Send a message
      description: |
        Sends a message to a specific conversation

      operationId: sendMessage

      security:
        - bearerAuth: []

      parameters:
        - name: id
          in: path
          description: The id of the conversation
          schema:
            type: string
            format: uuid
          required: true

      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                senderID:
                  type: string
                  format: uuid

                isImage:
                  type: boolean
                  example: false

                message:
                  type: string
                  example: Hello how are you?

      responses:
        "200":
          description: Message sent successfuly

  /conversation/{id}/messages/{messageId}/reactions:
    post:
      summary: React to a message in a conversation
      description: |
        Add a reaction to a message in a conversation

      security:
        - bearerAuth: []

      operationId: commentMessage

      parameters:
        - name: id
          in: path
          description: The id of the conversation
          schema:
            type: string
            format: uuid
          required: true

        - name: messageId
          in: path
          description: Thee id of the message
          schema:
            type: string
            format: uuid

          required: true

      requestBody:
        description: Reaction details
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    senderID:
                      type: string
                      format: uuid
                - $ref: "#/components/schemas/Reaction"

      responses:
        "200":
          description: Reaction added successfuly
          content:
            application/json:
              schema:
                type: string
                format: unicode

        "401":
          description: Unauthorized

  /conversation/{id}/messages/{messageId}/reactions/{reactionId}:
    delete:
      summary: Remove reaction from a message in a conversation
      description: |
        Remove the reaction from a specific message in a conversation

      operationId: uncommentMessage

      security:
        - bearerAuth: []

      parameters:
        - name: id
          in: path
          description: The id of the conversation
          schema:
            type: string
            format: uuid
          required: true

        - name: messageId
          in: path
          description: The id of the message
          schema:
            type: string
            format: uuid

          required: true

        - name: reactionId
          in: path
          description: The id of the reaction
          schema:
            type: string
            format: uuid

          required: true

      responses:
        "200":
          description: Reaction deleted successfuly

        "401":
          description: Unauthorized

  /users/{id}:
    put:
      summary: Update username
      description: Update the username based on id

      operationId: setMyUserName

      parameters:
        - name: id
          in: path
          description: The id of the conversation
          schema:
            type: string
            format: uuid
          required: true

      security:
        - bearerAuth: []

      requestBody:
        description: New username
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: John

      responses:
        "204":
          description: Update successfuly

components:
  schemas:
    Conversation:
      type: object
      properties:
        conversationID:
          type: string
          format: uuid

        name:
          type: string

        image:
          type: string
          format: uri

        isGroup:
          type: boolean

    Message:
      type: object
      properties:
        messageID:
          type: string
          format: uuid

        senderID:
          type: string
          format: uuid

        isImage:
          type: boolean
          example: false

        message:
          type: string
          example: Hello this is John Doe

        isDelivered:
          type: boolean
          default: false

        isRead:
          type: boolean
          default: false

        reactions:
          type: array
          items:
            type: object
            properties:
              unicode:
                type: string
                format: unicode

              count:
                type: integer

    Reaction:
      type: object
      properties:
        reactionID:
          type: string
          format: unicode

        unicode:
          type: string
          format: unicode

    User:
      type: object
      properties:
        userID:
          type: string
          format: uuid

        name:
          type: string
          example: John Doe

        image:
          type: string
          format: uri

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
